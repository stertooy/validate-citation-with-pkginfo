description: 'Runs the testintall.g or the teststandard.g script to test the GAP installation'

runs:
  using: "composite"
  steps:

    - name: "Install yq"
      shell: bash
      run: |
        sudo apt update
        sudo apt install --yes yq

    - name: "Create CITATION-generated.cff from PackageInfo.g"
      shell: bash
      run: |
        gap -A -q $GITHUB_ACTION_PATH/generate.g
        mv CITATION-generated.cff $RUNNER_TEMP
  
    - name: "Compare CITATION.cff with CITATION-generated.cff"
      shell: bash
      run: |
        A="CITATION.cff"
        B="$RUNNER_TEMP/CITATION-generated.cff"
        
        recursive_match() {
          local jsonA="$1"
          local jsonB="$2"
        
          local typeB=$(echo "$jsonB" | jq -r 'type')
          case "$typeB" in
            object)
              local keys=$(echo "$jsonB" | jq -r 'keys[]')
              for k in $keys; do
                local valA=$(echo "$jsonA" | jq -c ".\"$k\" // empty")
                local valB=$(echo "$jsonB" | jq -c ".\"$k\"")
                recursive_match "$valA" "$valB" || return 1
              done
              ;;
            array)
              local lenA=$(echo "$jsonA" | jq 'length')
              local lenB=$(echo "$jsonB" | jq 'length')
              for i in $(seq 0 $((lenB - 1))); do
                local elemB=$(echo "$jsonB" | jq -c ".[$i]")
                local matched=0
                for j in $(seq 0 $((lenA - 1))); do
                  local elemA=$(echo "$jsonA" | jq -c ".[$j]")
                  recursive_match "$elemA" "$elemB" && { matched=1; break; }
                done
                if (( matched == 0 )); then
                  return 1
                fi
              done
              ;;
            string|number|boolean|null)
              [[ "$jsonA" == "$jsonB" ]] || return 1
              ;;
            *)
              return 1
              ;;
          esac
          return 0
        }

        error=0
        keys=$(yq '.' "$B" | jq -r 'keys[]')
        for key in $keys; do
            # Ignore
            [[ "$key" == "cff-version" || "$key" == "message" ]] && continue
            echo "  Checking $key"
        
            if ! yq "has(\"$key\")" "$A" | grep -q true; then
                error=1
                echo "::error::Key '$key' present in $B but missing in $A"
            fi
        
            valA=$(yq ".\"$key\"" "$A" | jq -c '.')
            valB=$(yq ".\"$key\"" "$B" | jq -c '.')
        
            if ! recursive_match "$valA" "$valB"; then
                error=1
                echo "::error::Mismatch for key '$key': '$valA' vs '$valB'"
            fi
        done
        
        exit $error
